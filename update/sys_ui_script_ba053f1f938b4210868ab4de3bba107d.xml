<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_58872_needit.CsvUtility</name>
        <script><![CDATA[var x_58872_needit = x_58872_needit || {};

// 需要引入Csv解析的外部js(PapaParse, FileSaver)
// PapaParse的设定参照官网https://www.papaparse.com/#local-files
x_58872_needit.CsvUtility = (function() {
	"use strict";

/* set your private variables and functions here. For example: 
	var privateVar = 0; 
	function private_function() {
		return ++privateVar;
	}
*/
	//把字段名转换成符合db规则的名称
	function toDbColumnName(colName) {
		return "u_" + colName.toLowerCase().replaceAll(" ", "_");
	}

	//把字段名转换成符合展示规则的名称
	function toDisplayColumnName(colName) {
		var v = null;
		var head = colName.slice(0, 2);
		//去除开头的u_
		if (head == "u_") {
			v = colName.slice(2);
		} else {
			v = colName;
		}
		//首字母大写
		v = v.slice(0, 1).toUpperCase() + v.slice(1);
		return v.replaceAll("_", " ");
	}

/* Share variables between multiple UI scripts by adding them to your scope object. For example: 
	x_58872_needit.sharedVar = 0; 

 Then access them in your scripts the same way. For example: 
	function get_shared() {
		return x_58872_needit.sharedVar;
	}
*/

	return {

/* set your public API here. For example:
		incrementAndReturnPrivateVar: function() {
			return private_function();
		},
*/
		//保存csv的文件
		//return: 无
		saveCsv: function(csvDatas, fileName) {
			var BOM = '\uFEFF';
			var buff = Papa.unparse(csvDatas);
			var blob = new Blob([BOM + buff], {type: "text/plain;charset=utf-8"});
			saveAs(blob, fileName);
		},

		//解析CSV文件
		//isToDbColumnName: 是否把title行的列名转换成db名
		//hasHead: 是否有title行
		//headRowNo: title行的序号，从0开始
		//return: Promise，成功值（解析内容的object对象），失败值（失败原因）
		parseNormalCsv: function(fileObj, isToDbColumnName, hasHead, headRowNo) {
			if (typeof isToDbColumnName == "undefined") {
				isToDbColumnName = false;
			}
			if (typeof hasHead == "undefined") {
				hasHead = true;
			}
			if (!hasHead) {
				headRowNo = -1;
			} else {
				if (typeof headRowNo == "undefined") {
					headRowNo = 0;
				}
			}
			return new Promise(function(resolve, reject) {
				Papa.parse(fileObj, {
					complete: function(results) {
						var datas = results.data;
						var errors = results.errors;
						if (errors.length > 0) {
							reject("文件格式异常：" + JSON.stringify(errors));
							return;
						}
						if (datas.length < 1) {
							reject("没有有效数据");
							return;
						}

						var rowno_name = "";
						if (isToDbColumnName) {
							rowno_name = "sys_import_row";
						} else {
							rowno_name = "Row";
						}
						var cols = [rowno_name];
						var csvDatas = [];
						var ret = {};
						
						// alert("开始解析");
						//解析表头
						var headLine = null;
						if (hasHead) {
							headLine = datas[headRowNo];
						} else {
							//没有表头的场合把第一行的列数作为全表的列数
							headLine = datas[0];
						}
						for (var j = 0; j < headLine.length; j++) {
							var v = "";
							if (hasHead) {
								v = headLine[j];
								if (v == "") {
									v = String(j + 1);
								}
							} else {
								v = String(j + 1);
							}
							if (isToDbColumnName) {
								cols.push(toDbColumnName(v));
							} else {
								cols.push(v);
							}
						}
						//解析数据
						for (var i = headRowNo+1; i < datas.length; i++) {
							var data = datas[i];
							
							//cols因为增加了一个行号列，所以比数据列多一列
							if (data.length != (cols.length-1)) {
								//列数不一致，只有一个空字符串（空白行）不属于异常
								// alert("列数不一致，data.length=" + data.length);
								if (!(data.length == 1 && data[0] == "")) {
									errors.push({"Row": i, "data": data});
								}
								continue;
							}
							var line = {};
							line[rowno_name] = i;
							var isBlankLine = true;
							for (var k = 0; k < data.length; k++) {
								var colName = cols[k+1];
								var colValue = data[k];
								if (colValue) {
									isBlankLine = false;
								}
								line[colName] = colValue;
							}
							// alert("获取数据：" + JSON.stringify(line));
							if (!isBlankLine) {
								csvDatas.push(line);
							}
						}
						if (errors.length > 0) {
							reject("文件格式异常：" + JSON.stringify(errors));
							return;
						}
						if (csvDatas.length == 0) {
							reject("没有有效数据");
							return;
						}
						ret["heads"] = cols;
						ret["details"] = csvDatas;
						resolve(ret);
					}
				});
			});
		},

		type:  "CsvUtility"
	};
})();
]]></script>
        <script_name>CsvUtility</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-03 03:50:56</sys_created_on>
        <sys_id>ba053f1f938b4210868ab4de3bba107d</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>x_58872_needit.CsvUtility</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ui_script_ba053f1f938b4210868ab4de3bba107d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-11 05:15:49</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
