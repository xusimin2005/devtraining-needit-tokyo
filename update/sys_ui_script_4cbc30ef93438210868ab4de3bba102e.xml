<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_58872_needit.ExcelUtility</name>
        <script><![CDATA[var x_58872_needit = x_58872_needit || {};

// 需要引入Excel解析的外部js(exceljs, FileSaver)
// exceljs的设定参照官网https://gitee.com/alan_scut/exceljs#exceljs
x_58872_needit.ExcelUtility = (function() {
	"use strict";

/* set your private variables and functions here. For example: 
	var privateVar = 0; 
	function private_function() {
		return ++privateVar;
	}
*/
	var reader_err_message = ["0: UNKNOW", 
		"1: NOT_FOUND_ERR", "2: SECURITY_ERR", "3: ABORT_ERR", 
		"4: NOT_READABLE_ERR", "5: ENCODING_ERR"];

	//把字段名转换成符合db规则的名称
	function toDbColumnName(colName) {
		return "u_" + colName.toLowerCase().replaceAll(" ", "_");
	}

	//把字段名转换成符合展示规则的名称
	function toDisplayColumnName(colName) {
		var v = null;
		var head = colName.slice(0, 2);
		//去除开头的u_
		if (head == "u_") {
			v = colName.slice(2);
		} else {
			v = colName;
		}
		//首字母大写
		v = v.slice(0, 1).toUpperCase() + v.slice(1);
		return v.replaceAll("_", " ");
	}

	function dateToString(obj) {
		if (obj) {
			if (typeof obj == "string") {
				return obj;
			} else {
				try {
					var Y = obj.getFullYear();
					var M = obj.getMonth() + 1;
					var D = obj.getDate();
					return Y + '-' + (M < 10 ? ('0' + M) : M) + '-' + (D < 10 ? ('0' + D) : D);
				} catch(ex) {
					return obj.toString();
				}
			}
		} else {
			return '';
		}
	}

	function transformString(obj) {
		var objType = typeof obj;
		if (obj === null || obj === "" || objType === "undefined") {
			return "";
		} else if (objType === "string") {
			return obj;
		} else if (objType === "object") {
			if ("richText" in obj) {
				var richText = obj.richText;
				var buff = "";
				for (var i = 0; i < richText.length; i++) {
					buff = buff + richText[i]["text"];
				}
				return buff;
			} else if ("result" in obj) {
				return obj.result;
			} else if ("getDate" in obj) {
				return dateToString(obj);
			} else {
				return obj.toString();
			}
		} else {
			return obj.toString();
		}
	}

	function getCellValue(cell, type) {
		if (type === "string") {
			return cell.text;
		} else if (type === "number") {
			var v = cell.value;
			if (typeof v == "object") {
				return cell.result;
			} else {
				return v;
			}
		} else if (type === "date") {
			return dateToString(cell.value);
		} else if (type === "result") {
			var r = cell.result;
			if (typeof r == "object") {
				return null;
			} else {
				return r;
			}
		} else if (type === "formula") {
			return cell.formula;
		} else {
			return transformString(cell.value);
		}
	}

	//获取某个单元格Level Title的值，并保存到相应的csvGroups对象中
	function getCellTitleValue(cell, csvGroups, loopLevel, titleIdx, group, group2) {
		if (loopLevel == null) return; 
		
		var loop_col_starts = loopLevel.loop_col_starts;
		var level_titles = loopLevel.level_titles;
		var level_title_types = loopLevel.level_title_types;
		var groupName = null, csvTitles = null;

		if (typeof group2 == "undefined" || group2 == null) {
			groupName = String(group);
		} else {
			groupName = String(group2) + " " + String(group);
		}

		if (csvGroups.hasOwnProperty(groupName)) {
			csvTitles = csvGroups[groupName];
		} else {
			csvTitles = {}; //csvTitles包含一组level_titles
			csvGroups[groupName] = csvTitles; //csvGroups按分组号保存level_titles
		}
		
		for (var j = 0; j < loop_col_starts.length; j++) {
			if (titleIdx == loop_col_starts[j]) { //需要保存title
				csvTitles[level_titles[j]] = getCellValue(cell, level_title_types[j]);
				break;
			}
		} // end of one title process
	}

	//检查当前行是否是Level Title行，如果是，返回loop_level，否则返回null
	function findLevel(rowNo, loop_levels) {
		if (loop_levels == null) return null;

		for (var j = 0; j < loop_levels.length; j++) {
			if (loop_levels[j].row == rowNo) {
				return loop_levels[j];
			}
		}
		return null;
	}

	//追加Head一览到col列中
	function appendHeads(cols, loop_heads, isToDbColumnName) {
		if (loop_heads == null) return;

		for (var j = 0; j < loop_heads.length; j++) { 
			var loop_head = loop_heads[j];
			if (isToDbColumnName) {
				cols.push(toDbColumnName(loop_head));
			} else {
				cols.push(loop_head);
			}
		}
	}

	//追加Level到col列和Level一览中
	function appendLevel(cols, csvLevels, loopLevel, csvGroups, isToDbColumnName) {
		if (loopLevel == null) return;

		var level_titles = loopLevel.level_titles;
		var csvLevel = {"level_titles": level_titles, "level_values": csvGroups};
		csvLevels.push(csvLevel); //csvLevels按level保存多个分组的level_titles的值

		//添加csvLevel列
		appendHeads(cols, level_titles, isToDbColumnName);
	}

	//添加一行数据
	function appendDataLine(csvDatas, row, row_no, common_heads, common_head_types, loop_col_count, loop_heads, loop_head_types, csvLevels, 
				cols, loop_group_col_count, group, group2) {
		var isBlankGroup = true;
		var groupValues = [];
		var j = 0, k = 0;
		var colName = null, groupName = null, val = null;
		if (typeof group2 == "undefined" || group2 == null) {
			groupName = String(group);
		} else {
			groupName = String(group2) + " " + String(group);
		}

		//获取Group的值
		for (j = 0; j < loop_group_col_count; j++) {
			colName = loop_heads[j] + " " + groupName; //headName+空格+group号
			val = getCellValue(row.getCell(colName), loop_head_types[j]);
			if (val) {
				isBlankGroup = false;
			}
			groupValues.push(val);
		}

		if (!isBlankGroup) {
			var line = {};
			line["row_no"] = row_no;
			var columnIdx = 0;
			
			//common_heads
			for(j = 0; j < common_heads.length; j++) {
				colName = common_heads[j];
				line[cols[columnIdx]] = getCellValue(row.getCell(colName), common_head_types[j]);
				columnIdx++;
			}

			//level_titles（level数可以大于1，每个level都可以有多个group，每个group又有一组title）
			for (j = 0; j < csvLevels.length; j++) {
				var csvLevel = csvLevels[j]; //csvLevels[j]对应level，String(group)对应group，titles对应group下的分组level_titles
				var level_titles = csvLevel.level_titles;
				var level_values = csvLevel.level_values;

				var level_group = level_values[groupName];
				for (k = 0; k < level_titles.length; k++) {
					var level_group_title = level_titles[k];
					if (level_group.hasOwnProperty(level_group_title)) {
						line[cols[columnIdx]] = level_group[level_group_title];
					} else {
						line[cols[columnIdx]] = null;
					}
					columnIdx++;
				}
			}

			//loop_value
			for (j = 0; j < loop_group_col_count; j++) {
				line[cols[columnIdx]] = groupValues[j];
				columnIdx++;
			}
			//如果数据不完整，补足缺失的数据字段
			for (j = loop_group_col_count; j < loop_col_count; j++) {
				line[cols[columnIdx]] = null;
				columnIdx++;
			}

			csvDatas.push(line);
		} // end of one group
	}

	// getLocalFile函数：通过FileReader读取本地文件并返回结果给Promise
	function getLocalFile(fileObj) {
		return new Promise(function(resolve, reject) {
			var reader = new FileReader();
			reader.filename = fileObj.name;
			reader.filetype = fileObj.type;
			reader.onloadend = function(e) {
				resolve(e.target);
			};
			reader.onerror = function(e) {
				var errCode = e.target.error.code;
				if (errCode >= reader_err_message.length) {
					reject(errCode + ": UNKNOW");
				} else {
					reject(reader_err_message[errCode]);
				}
			};
			reader.readAsArrayBuffer(fileObj);
		});
	}

/* Share variables between multiple UI scripts by adding them to your scope object. For example: 
	x_58872_needit.sharedVar = 0; 

 Then access them in your scripts the same way. For example: 
	function get_shared() {
		return x_58872_needit.sharedVar;
	}
*/

	return {

/* set your public API here. For example:
		incrementAndReturnPrivateVar: function() {
			return private_function();
		},
*/
		//保存excel的文件
		//return: 无
		saveExcel: function(workbook, fileName) {
			// 导出文件
			workbook.xlsx.writeBuffer().then(function(data) {
				var blob = new Blob([data], {type: 'application/octet-stream'});
				saveAs(blob, fileName);
			});
		},

		//根据参数作成并返回Excel Sheet
		//sheetOptions：设定Sheet的冻结表头等的参数（参数设定请参照官网），可以不设
		//return: worksheet
		createExcelSheet: function(workbook, sheetName, titleColumns, subTitleColumns, dataRows, sheetOptions) {
			if (typeof sheetOptions == 'undefined' || sheetOptions == null) {
				sheetOptions = {};
			}
			var worksheet = workbook.addWorksheet(sheetName, sheetOptions);
			//设置表头
			worksheet.columns = titleColumns;
			//设置副标题
			if (!(typeof subTitleColumns == 'undefined' || subTitleColumns == null)) {
				worksheet.addRows(subTitleColumns);
			}
			//设置数据
			if (!(typeof dataRows == 'undefined' || dataRows == null)) {
				worksheet.addRows(dataRows);
			}

			return worksheet;
		},

		//根据arraybuffer构成Excel的Workbook
		//return: Promise，成功值（workbook），失败值（失败原因）
		createWorkbookWithTemplate: function (arraybuffer) {
			return new Promise(function(resolve, reject) {
				try {
					var workbook = new ExcelJS.Workbook();
					workbook.xlsx.load(arraybuffer).then(function() {
						resolve(workbook);
					}).catch(function(error) {
						workbook = null;
						reject(error.message);
					}); //end of workbook.xlsx.load
				} catch(ex) {
					reject(ex.message);
				}

			}); //end of new Promise
		},

		//构成空白的Excel的Workbook
		//return: Promise，成功值（workbook），失败值（失败原因）
		createBlankWorkbook: function () {
			return new Promise(function(resolve, reject) {
				try {
					var workbook = new ExcelJS.Workbook();
					resolve(workbook);
				} catch(ex) {
					reject(ex.message);
				}
			}); //end of new Promise
		},

		//打开本地Excel文件
		//return: Promise，成功值（workbook），失败值（失败原因）
		getLocalExcel: function (fileObj) {
			return getLocalFile(fileObj).then(function(reader) {
				return new Promise(function(resolve, reject) {
					var workbook = new ExcelJS.Workbook();
					workbook.xlsx.load(reader.result).then(function() {
						resolve(workbook);
					}).catch(function(error) {
						workbook = null;
						reject(error.message);
					}); //end of workbook.xlsx.load

				}); //end of new Promise

			}); //end of getLocalFile
		}, 

		//解析Excel文件
		//headTypes: 表头数据类型一览
		//isToDbColumnName: 是否把title行的列名转换成db名
		//sheetNo: sheet的序号，从1开始
		//hasHead: 是否有title行
		//headRowNo: title行的序号，从1开始
		//return: Promise，成功值（解析内容的object对象），失败值（失败原因）
		parseNormalExcel: function(fileObj, headTypes, isToDbColumnName, sheetNo, hasHead, headRowNo) {
			if (typeof headTypes == "undefined" || headTypes == null) {
				headTypes = [];
			}
			if (typeof isToDbColumnName == "undefined") {
				isToDbColumnName = false;
			}
			if (typeof sheetNo == "undefined") {
				sheetNo = 1;
			}
			if (typeof hasHead == "undefined") {
				hasHead = true;
			}
			if (!hasHead) {
				headRowNo = 0;
			} else {
				if (typeof headRowNo == "undefined") {
					headRowNo = 1;
				}
			}
			return this.getLocalExcel(fileObj).then(function(workbook) {
				return new Promise(function(resolve, reject) {
					var worksheet = workbook.getWorksheet(sheetNo);
					if (typeof worksheet == "undefined") {
						worksheet = workbook.worksheets[0];
						sheetNo = worksheet.id;
					}

					var firstDataLine = headRowNo + 1;
					//行号列的列名
					var rowno_name = "";
					if (isToDbColumnName) {
						rowno_name = "sys_import_row";
					} else {
						rowno_name = "Row";
					}
					//第一列设置行号
					var cols = [rowno_name];
					var csvDatas = [];
					var ret = {};

					try {
						//获取表头
						var headRow = null;
						if (hasHead) {
							headRow = worksheet.getRow(headRowNo);
						} else {
							//没有表头的场合把第一行的列数作为全表的列数
							headRow = worksheet.getRow(1);
						}
						headRow.eachCell({ includeEmpty: true }, function(cell, colNumber) {
							var v = "";
							if (hasHead) {
								//cell.text无法处理日期类型
								//v = cell.text;
								v = transformString(cell.value);
								if (v == "") {
									v = String(colNumber);
								}
							} else {
								v = String(colNumber);
							}
							if (isToDbColumnName) {
								cols.push(toDbColumnName(v));
							} else {
								cols.push(v);
							}
							//如果表头数据类型数量不足，补足空白类型
							if (headTypes.length < colNumber) {
								headTypes.push("");
							}
						});

						//设置表头
						for (var i = 1; i < cols.length; i++) {
							worksheet.getColumn(i).key = cols[i];
						}

						//获取数据
						worksheet.eachRow({ includeEmpty: true }, function(row, rowNumber) {
							if (rowNumber >= firstDataLine) {
								var rowValues = {};
								//设置行号
								rowValues[rowno_name] = rowNumber;
								var isBlankRow = true;
								//循环列的数据
								for (var i = 1; i < cols.length; i++) {
									var colItem = cols[i];
									//var itemValue = row.getCell(colItem).text;
									//var itemValue = transformString(row.getCell(colItem).value);
									var itemValue = getCellValue(row.getCell(colItem), headTypes[i - 1]);
									if (itemValue) {
										isBlankRow = false;
									}
									rowValues[colItem] = itemValue;
								}
								//非空白行的时候加入
								if (!isBlankRow) {
									csvDatas.push(rowValues);
								}
							}
						});
						workbook = null;

						ret["heads"] = cols;
						ret["details"] = csvDatas;
						resolve(ret);
					} catch (e) {
						workbook = null;
						// alert(e.message);
						reject(e.message);
					}

				}); //end of new Promise

			}); //end of getLocalExcel
		},

		//解析Excel文件，从长的行转化为短的行
		//params: 定义长短转换的规则，参照如下方法设定
		// {
		// "common_heads": ["機種", "販社", "仕向地", "仕向港", "PSI"], 
		// "common_head_types": ["string", "string", "string", "string", "string"],
		// "loop_col_count": 1, "loop_heads": ["数量"], "loop_head_types": ["number"], 
		// "level": 1, "loop_levels": [
		// 	{"row": 1, "loop_col_starts": [1], "col_spans": [1], "level_titles": ["日期"], "level_title_types": ["date"]}
		// ]
		// }
		//isToDbColumnName: 是否把title行的列名转换成db名
		//sheetNo: sheet的序号，从1开始
		//return: Promise，成功值（解析内容的object对象），失败值（失败原因）
		parseLongToShort: function(fileObj, params, isToDbColumnName, sheetNo) {
			if (typeof isToDbColumnName == "undefined") {
				isToDbColumnName = false;
			}
			if (typeof sheetNo == "undefined") {
				sheetNo = 1;
			}
			return this.getLocalExcel(fileObj).then(function(workbook) {
				return new Promise(function(resolve, reject) {
					var worksheet = workbook.getWorksheet(sheetNo);
					if (typeof worksheet == "undefined") {
						worksheet = workbook.worksheets[0];
						sheetNo = worksheet.id;
					}

					var cols = [];
					var cols_with_group = [];
					var csvDatas = [];
					var csvLevels = [];
					var ret = {};
					var i = 0, j = 0, k = 0;
					var diff = 0, group = 0, mod = 0, titleIdx = 0, max_col_group = 0, last_group_cols = 0;
					var key = "";

					try {
						var headRowNo = params.level;
						var firstDataLine = headRowNo + 1;
						var common_heads = params.common_heads;
						var common_head_types = params.common_head_types;
						var loop_col_count = params.loop_col_count;
						var loop_heads = params.loop_heads;
						var loop_head_types = params.loop_head_types;
						var loop_levels = params.loop_levels;
						
						//获取表头
						var headRow = null;
						var loopLevel = null;
						var processTitle = false;

						//先保留共通部分，分别设到cols_with_group（excel的列别名）和cols（json数据的字段名）
						cols_with_group.push.apply(cols_with_group, common_heads);
						for (i = 0; i < common_heads.length; i++) {
							if (isToDbColumnName) {
								cols.push(toDbColumnName(common_heads[i]));
							} else {
								cols.push(common_heads[i]);
							}
						}

						for (i = 1; i <= headRowNo; i++) {
							processTitle = false;
							//检查是否是需要保留值的title行
							for (j = 0; j < loop_levels.length; j++) {
								if (loop_levels[j].row == i) {
									loopLevel = loop_levels[j];
									processTitle = true;
									break;
								}
							}
							//如果是需要保存值的标题行或者是标题行的最后一行
							if (processTitle || i == headRowNo) {
								headRow = worksheet.getRow(i);
							} else {
								continue;
							}
							
							var csvTitles = {}, csvGroups = {};
							headRow.eachCell({ includeEmpty: true }, function(cell, colNumber) {
								diff = colNumber - common_heads.length;
								group = Math.ceil(diff / loop_col_count);
								mod = diff % loop_col_count;
								if (mod == 0) {
									titleIdx = loop_col_count;
								} else {
									titleIdx = mod;
								}

								//处理title行
								var loop_col_starts = null, level_titles = null, level_title_types = null, level_title = null;
								if (processTitle) {
									loop_col_starts = loopLevel.loop_col_starts;
									level_titles = loopLevel.level_titles;
									level_title_types = loopLevel.level_title_types;
									for(j = 0; j < loop_col_starts.length; j++) {
										if (titleIdx == loop_col_starts[j]) { //需要保存title
											if (titleIdx == 1) { //每个group的首列
												csvTitles = {}; //csvTitles包含一组level_titles
												csvGroups[String(group)] = csvTitles; //csvGroups按分组号保存level_titles
											}
											level_title = level_titles[j];
											csvTitles[level_title] = getCellValue(cell, level_title_types[j]);
											break;
										}
									} // end of one title process
								}

								//处理head行
								if (i == headRowNo && colNumber > common_heads.length) {
									var loop_head = loop_heads[titleIdx - 1];
									var loop_head_with_group = loop_head + " " + String(group); //headName+空格+group号
									cols_with_group.push(loop_head_with_group);
								} // end of one head process

							}); // end of headRow.eachCell

							if (processTitle) { //保存处理的title行
								var level_titles = loopLevel.level_titles;
								var csvLevel = {"level_titles": level_titles, "level_values": csvGroups};
								csvLevels.push(csvLevel); //csvLevels按level保存多个分组的level_titles的值
								// //保存第一个分组的所有列名
								// for (key in csvGroups["1"]) { 
								// 	if (isToDbColumnName) {
								// 		cols.push(toDbColumnName(key));
								// 	} else {
								// 		cols.push(key);
								// 	}
								// }
								for (j = 0; j < level_titles.length; j++) {
									if (isToDbColumnName) {
										cols.push(toDbColumnName(level_titles[j]));
									} else {
										cols.push(level_titles[j]);
									}
								}
							}

							if (i == headRowNo) { //保存loop的最大group数和loop_heads的列名
								max_col_group = group;
								last_group_cols = titleIdx;
								//保存loop_heads的所有列名
								for (j = 0; j < loop_heads.length; j++) { 
									var loop_head = loop_heads[j];
									if (isToDbColumnName) {
										cols.push(toDbColumnName(loop_head));
									} else {
										cols.push(loop_head);
									}
								}
							}

						} // end of headRowNo loop

						//设置表头
						for (i = 0; i < cols_with_group.length; i++) {
							worksheet.getColumn(i+1).key = cols_with_group[i];
						}

						var colName = "";
						var isBlankGroup = true;
						var groupValues = [];
						var columnIdx = 0;
						var loop_group_col_count = 0;

						//获取数据
						worksheet.eachRow({ includeEmpty: true }, function(row, rowNumber) {
							if (rowNumber >= firstDataLine) {
								
								//循环列的数据
								for (var group = 1; group <= max_col_group; group++) {
									isBlankGroup = true;
									groupValues = [];

									//调整group的字段数
									if (group == max_col_group) {
										loop_group_col_count = last_group_cols;
									} else {
										loop_group_col_count = loop_col_count;
									}
									//获取Group的值
									for (j = 0; j < loop_group_col_count; j++) {
										colName = loop_heads[j] + " " + String(group); //headName+空格+group号
										var val = getCellValue(row.getCell(colName), loop_head_types[j]);
										if (val) {
											isBlankGroup = false;
										}
										groupValues.push(val);
									}

									if (!isBlankGroup) {
										var line = {};
										columnIdx = 0;
										
										//common_heads
										for(j = 0; j < common_heads.length; j++) {
											colName = common_heads[j];
											line[cols[columnIdx]] = getCellValue(row.getCell(colName), common_head_types[j]);
											columnIdx++;
										}

										//level_titles（level数可以大于1，每个level都可以有多个group，每个group又有一组title）
										for(j = 0; j < csvLevels.length; j++) {
											var csvLevel = csvLevels[j]; //csvLevels[j]对应level，String(group)对应group，titles对应group下的分组level_titles
											var level_titles = csvLevel.level_titles;
											var level_values = csvLevel.level_values;

											var level_group = level_values[String(group)];
											// var key = ""; //key对应group下每组title名称
											// for(key in level_group) { 
											// 	line[cols[columnIdx]] = level_group[key];
											// 	columnIdx++;
											// }
											for (k = 0; k < level_titles.length; k++) {
												var level_group_value = level_group[level_titles[k]];
												if (typeof level_group_value == "undefined") {
													line[cols[columnIdx]] = null;
												} else {
													line[cols[columnIdx]] = level_group[level_titles[k]];
												}
												columnIdx++;
											}
										}

										//loop_value
										for (j = 0; j < loop_group_col_count; j++) {
											line[cols[columnIdx]] = groupValues[j];
											columnIdx++;
										}
										//如果数据不完整，补足缺失的数据字段
										for (j = loop_group_col_count; j < loop_col_count; j++) {
											line[cols[columnIdx]] = null;
											columnIdx++;
										}

										csvDatas.push(line);
									} // end of one group

								} // end of one line
								
							} // end of all data line
						});
						workbook = null;

						ret["heads"] = cols;
						ret["details"] = csvDatas;
						resolve(ret);
					} catch (e) {
						workbook = null;
						// alert(e.message);
						reject(e.message);
					}

				}); //end of new Promise

			}); //end of getLocalExcel
		},

		//解析Excel文件，从长的行转化为短的行，2层循环结构
		//params: 定义长短转换的规则，参照如下方法设定
		// {
			// "level": 9, 
			// "common_heads": ["No", "FGLmodelname", "Salesmodelname", "Factroy", "E", "Category", "I/O", "H", "COGS", "J", "Index", "Con Pro", "Arg Chk", "Rep Model", "SMS", "Last On Hand", "Last OTW OH"], 
			// "common_head_types": ["number", "string", "string", "string", "string", "string", "string", "string", "number", "string", "number", "string", "string", "string", "string", "number", "number"],
			// "loop1_col_count": 15, 
			// "loop1_heads": ["Shipped", "Production", "P Revised FG XX", "P Revised HQ", "P TTL", "Internal Transaction", "Comment", "Forecast", "Ordered", "S Revised", "S TTL", "On Hand", "OTW", "OTW OH", "INDEX I TTL"], 
			// "loop1_head_types": ["number", "number", "number", "number", "result", "number", "number", "number", "number", "number", "result", "number", "number", "result", "result"], 
			// "loop2_col_count": 63, "loop2_col_skips": 60, 
			// "loop2_heads": ["P", "S", "I"], 
			// "loop2_head_types": ["result", "result", "result"], 
			// "loop1_levels": [
			// 	{"row": 1, "loop_col_starts": [1], "col_spans": [15], 
			// 	"level_titles": ["Date"], "level_title_types": ["date"]}
			// ], 
			// "loop2_levels": [
			// 	{"row": 1, "loop_col_starts": [1], "col_spans": [3], 
			// 	"level_titles": ["Date"], "level_title_types": ["string"]}
			// ]
		// }
		//isToDbColumnName: 是否把title行的列名转换成db名
		//sheetNo: sheet的序号，从1开始
		//hasFixedHead: 是否包含固定标题列
		//limit_loop_cnt: 是否包含有限循环项目，有的话设定循环次数
		//return: Promise，成功值（解析内容的object对象），失败值（失败原因）
		parseLongToShort2: function(fileObj, params, isToDbColumnName, sheetNo, hasFixedHead, limit_loop_cnt) {
			if (typeof isToDbColumnName == "undefined" || isToDbColumnName == null) {
				isToDbColumnName = false;
			}
			if (typeof sheetNo == "undefined" || sheetNo == null) {
				sheetNo = 1;
			}
			if (typeof hasFixedHead == "undefined" || hasFixedHead == null) {
				hasFixedHead = false;
			}
			if (typeof limit_loop_cnt == "undefined" || limit_loop_cnt == null) {
				limit_loop_cnt = 0;
			}
			return this.getLocalExcel(fileObj).then(function(workbook) {
				return new Promise(function(resolve, reject) {
					var worksheet = workbook.getWorksheet(sheetNo);
					if (typeof worksheet == "undefined") {
						worksheet = workbook.worksheets[0];
						sheetNo = worksheet.id;
					}

					var cols = [], loop2_cols = [], fixed_cols = [], limit_cols = [];
					var cols_with_group = [];
					var csvDatas = [], csvLoop2Datas = [], csvFixedDatas = [], csvLimitDatas = [];
					var csvLevels = [], csvLoop2Levels = [], csvFixedLevels = [], csvLimitLevels = [];
					var ret = {};
					var i = 0;
					var max_col_group = 0, last_group_cols = 0;
					var diff = 0, group = 0, mod = 0, titleIdx = 0;
					var group2 = 0, mod2 = 0;

					try {
						var headRowNo = params.level;
						var firstDataLine = headRowNo + 1;
						var common_heads = params.common_heads;
						var common_head_types = params.common_head_types;

						var loop1_col_count = params.loop1_col_count;
						var loop1_heads = params.loop1_heads;
						var loop1_head_types = params.loop1_head_types;
						var loop1_levels = params.loop1_levels;

						var loop2_col_count = params.loop2_col_count;
						var loop2_col_skips = params.loop2_col_skips;
						var loop2_heads = params.loop2_heads;
						var loop2_head_types = params.loop2_head_types;
						var loop2_levels = params.loop2_levels;

						//动态设置fixed_title
						var fixed_head_count = 0, fixed_heads = null, fixed_head_types = null, fixed_head_levels = null;
						if (hasFixedHead) {
							fixed_head_count = params.fixed_head_count;
							fixed_heads = params.fixed_heads;
							fixed_head_types = params.fixed_head_types;
							fixed_head_levels = params.fixed_head_levels;
						}

						//动态设置limit_loop
						var limit_loop_col_count = 0, total_limit_loop_col_count = 0, limit_loop_heads = null, limit_loop_head_types = null, limit_loop_levels = null;
						if (limit_loop_cnt > 0) {
							limit_loop_col_count = params.limit_loop_col_count;
							total_limit_loop_col_count = limit_loop_col_count * limit_loop_cnt;
							limit_loop_heads = params.limit_loop_heads;
							limit_loop_head_types = params.limit_loop_head_types;
							limit_loop_levels = params.limit_loop_levels;
						}
						
						//获取表头
						var headRow = null;
						var loop1Level = null, loop2Level = null, fixedLevel = null, limitLevel = null;
						var processLoop1LevelTitle = false, processLoop2LevelTitle = false, processFixedLevelTitle = false, processlimitLevelTitle = false;

						//先保留共通部分，分别设到cols_with_group（excel的列别名）和cols（json数据的字段名）
						cols_with_group.push.apply(cols_with_group, common_heads);
						appendHeads(cols, common_heads, isToDbColumnName);
						appendHeads(loop2_cols, common_heads, isToDbColumnName);
						if (hasFixedHead) appendHeads(fixed_cols, common_heads, isToDbColumnName);
						if (limit_loop_cnt > 0) appendHeads(limit_cols, common_heads, isToDbColumnName);

						for (i = 1; i <= headRowNo; i++) {
							//检查是否是需要保留值的title行
							fixedLevel = findLevel(i, fixed_head_levels);
							if (fixedLevel == null) {
								processFixedLevelTitle = false;
							} else {
								processFixedLevelTitle = true;
							}

							limitLevel = findLevel(i, limit_loop_levels);
							if (limitLevel == null) {
								processlimitLevelTitle = false;
							} else {
								processlimitLevelTitle = true;
							}

							loop1Level = findLevel(i, loop1_levels);
							if (loop1Level == null) {
								processLoop1LevelTitle = false;
							} else {
								processLoop1LevelTitle = true;
							}

							loop2Level = findLevel(i, loop2_levels);
							if (loop2Level == null) {
								processLoop2LevelTitle = false;
							} else {
								processLoop2LevelTitle = true;
							}

							//如果是需要保存值的标题行或者是标题行的最后一行
							if (processFixedLevelTitle || processlimitLevelTitle || processLoop1LevelTitle || processLoop2LevelTitle || i == headRowNo) {
								headRow = worksheet.getRow(i);
							} else {
								continue;
							}
							
							var csvLoop1Groups = {}, csvLoop2Groups = {}, csvFixedGroups = {}, csvLimitGroups = {};
							headRow.eachCell({ includeEmpty: true }, function(cell, colNumber) {
								if (colNumber <= common_heads.length) return;

								if (colNumber <= common_heads.length + fixed_head_count) { //处于fixed列
									group2 = 0;
									group = 0;
									titleIdx = colNumber - common_heads.length;
								} else { //处于循环的列
									diff = colNumber - common_heads.length - fixed_head_count;
									group2 = Math.ceil(diff / loop2_col_count);
									mod2 = diff % loop2_col_count;
									
									if (mod2 > 0 && mod2 <= loop2_col_skips) { //处于第一层循环（内循环）
										group = Math.ceil(mod2 / loop1_col_count);
										mod = mod2 % loop1_col_count;
										if (mod == 0) {
											titleIdx = loop1_col_count;
										} else {
											titleIdx = mod;
										}
									} else { //处于第二层循环（外循环）
										group = 0;
										if (mod2 == 0) {
											titleIdx = loop2_col_count - loop2_col_skips;
										} else {
											titleIdx = mod2 - loop2_col_skips;
										}
									}
								}

								//处理title行
								if (processFixedLevelTitle && group2 == 0 && group == 0) {
									getCellTitleValue(cell, csvFixedGroups, fixedLevel, titleIdx, group, group2);
								}
								if (processLoop1LevelTitle && group2 > 0 && group > 0) {
									getCellTitleValue(cell, csvLoop1Groups, loop1Level, titleIdx, group, group2);
								}
								if (processLoop2LevelTitle && group2 > 0 && group == 0) {
									getCellTitleValue(cell, csvLoop2Groups, loop2Level, titleIdx, group, group2);
								}

								var loop_head_with_group = null, loop_head = null;
								//处理head行的fixed段
								if (i == headRowNo && group2 == 0 && group == 0) {
									loop_head = fixed_heads[titleIdx - 1];
									loop_head_with_group = loop_head + " " + String(group2) + " " + String(group); //headName+空格+group号
									cols_with_group.push(loop_head_with_group);
								} // end of one loop head process

								//处理head行的loop段
								if (i == headRowNo && group2 > 0) {
									if (group == 0) { //外层循环的时候
										loop_head = loop2_heads[titleIdx - 1];
									} else { //内层循环的时候
										loop_head = loop1_heads[titleIdx - 1];
									}
									loop_head_with_group = loop_head + " " + String(group2) + " " + String(group); //headName+空格+group号
									cols_with_group.push(loop_head_with_group);
								} // end of one loop head process

							}); // end of headRow.eachCell

							//保存处理的title行
							if (processFixedLevelTitle) { 
								appendLevel(fixed_cols, csvFixedLevels, fixedLevel, csvFixedGroups, isToDbColumnName);
							}
							if (processLoop1LevelTitle) { 
								appendLevel(cols, csvLevels, loop1Level, csvLoop1Groups, isToDbColumnName);
							}
							if (processLoop2LevelTitle) { 
								appendLevel(loop2_cols, csvLoop2Levels, loop2Level, csvLoop2Groups, isToDbColumnName);
							}

							if (i == headRowNo) { //保存loop的最大group数和loop_heads的列名
								max_col_group = group2;
								if (group == 0) { //外层循环的时候
									last_group_cols = loop2_col_skips + titleIdx;
								} else { //内层循环的时候
									last_group_cols = (group - 1) * loop1_col_count + titleIdx;
								}
								//保存loop_heads的所有列名
								appendHeads(fixed_cols, fixed_heads, isToDbColumnName);
								appendHeads(cols, loop1_heads, isToDbColumnName);
								appendHeads(loop2_cols, loop2_heads, isToDbColumnName);
							}

						} // end of headRowNo loop

						//设置表头
						for (i = 0; i < cols_with_group.length; i++) {
							worksheet.getColumn(i+1).key = cols_with_group[i];
						}

						var loop_group_col_count = 0, inner_loop_col_count = 0;
						//获取数据
						worksheet.eachRow({ includeEmpty: true }, function(row, rowNumber) {
							if (rowNumber >= firstDataLine) {
								
								//获取一行中的fixed
								if (hasFixedHead) {
									appendDataLine(csvFixedDatas, row, rowNumber, common_heads, common_head_types, fixed_head_count, 
										fixed_heads, fixed_head_types, csvFixedLevels, fixed_cols, fixed_head_count, 0, 0);
								}
								
								//循环列的数据
								for (var group2 = 1; group2 <= max_col_group; group2++) {
									//内循环件数
									var innerGroup = 0;
									//内循环索引
									var group = 0;

									//调整group的字段数
									if (group2 == max_col_group) {
										loop_group_col_count = last_group_cols;
										if (last_group_cols >= loop2_col_skips) {
											innerGroup = loop2_col_skips / loop1_col_count;
										} else {
											innerGroup = Math.ceil(last_group_cols / loop1_col_count);
										}
									} else {
										loop_group_col_count = loop2_col_count;
										innerGroup = loop2_col_skips / loop1_col_count;
									}

									//获取一行中的内循环
									for (group = 1; group <= innerGroup; group++) {
										if (loop_group_col_count >= group * loop1_col_count) {
											inner_loop_col_count = loop1_col_count;
										} else {
											inner_loop_col_count = loop_group_col_count - (group - 1) * loop1_col_count;
										}

										appendDataLine(csvDatas, row, rowNumber, common_heads, common_head_types, loop1_col_count, 
											loop1_heads, loop1_head_types, csvLevels, cols, inner_loop_col_count, group, group2);
										
									} // end of innerGroup loop

									//存在外循环的场合, 获取一行中的外循环
									if (loop_group_col_count > loop2_col_skips) { 
										appendDataLine(csvLoop2Datas, row, rowNumber, common_heads, common_head_types, loop2_col_count - loop2_col_skips, 
											loop2_heads, loop2_head_types, csvLoop2Levels, loop2_cols, loop_group_col_count - loop2_col_skips, 0, group2);
									}

								} // end of one line
								
							} // end of all data line
						});
						workbook = null;

						ret["heads"] = cols;
						ret["details"] = csvDatas;
						ret["fixed_heads"] = fixed_cols;
						ret["fixed_details"] = csvFixedDatas;
						ret["loop2_heads"] = loop2_cols;
						ret["loop2_details"] = csvLoop2Datas;
						resolve(ret);
					} catch (e) {
						workbook = null;
						// alert(e.message);
						reject(e.message);
					}

				}); //end of new Promise

			}); //end of getLocalExcel
		},

		type:  "ExcelUtility"
	};
})();
]]></script>
        <script_name>ExcelUtility</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-03 09:01:34</sys_created_on>
        <sys_id>4cbc30ef93438210868ab4de3bba102e</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>x_58872_needit.ExcelUtility</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ui_script_4cbc30ef93438210868ab4de3bba102e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-23 10:33:33</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
