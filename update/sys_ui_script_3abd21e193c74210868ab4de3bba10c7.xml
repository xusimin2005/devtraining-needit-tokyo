<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_58872_needit.Utility</name>
        <script><![CDATA[var x_58872_needit = x_58872_needit || {};

// 纯js方法，不需要引入外部包
x_58872_needit.Utility = (function() {
	"use strict";

/* set your private variables and functions here. For example: 
	var privateVar = 0; 
	function private_function() {
		return ++privateVar;
	}
*/
	var reader_err_message = ["0: UNKNOW", 
		"1: NOT_FOUND_ERR", "2: SECURITY_ERR", "3: ABORT_ERR", 
		"4: NOT_READABLE_ERR", "5: ENCODING_ERR"];

	//format的标准格式为yyyy-MM-dd HH:mm:ss，默认值为yyyy-MM-dd
	function dateToString(obj, format) {
		if (obj) {
			if (typeof obj == "string") {
				return obj;
			} else {
				if (!format) {
					format = 'yyyy-MM-dd';
				}
				try {
					var YYYY = String(obj.getFullYear());
					var M = obj.getMonth() + 1;
					var MM = M < 10 ? ('0' + M) : String(M);
					var D = obj.getDate();
					var DD = D < 10 ? ('0' + D) : String(D);

					var strDate = null;
					if (format == 'yyyyMMdd') {
						strDate = YYYY + MM + DD;
					} else if (format == 'yyyyMM') {
						strDate = YYYY + MM;
					} else if (format == 'yyyy-MM') {
						strDate = YYYY + '-' + MM;
					} else {
						strDate = YYYY + '-' + MM + '-' + DD;
					}

					//包含时间的场合yyyy-MM-dd HH:mm:ss
					if (format == 'yyyy-MM-dd HH:mm:ss') {
						var h = obj.getHours();
						var hh = h < 10 ? ('0' + h) : String(h);
						var m = obj.getMinutes();
						var mm = m < 10 ? ('0' + m) : String(m);
						var s = obj.getSeconds();
						var ss = s < 10 ? ('0' + s) : String(s);

						var strTime = hh + ':' + mm + ':' + ss;

						return strDate + ' ' + strTime;
					} else {
						return strDate;
					}
				} catch(ex) {
					return obj.toString();
				}
			}
		} else {
			return '';
		}
	}

	function stringToDate(obj) {
		if (obj) {
			return new Date(obj);
		} else {
			return new Date();
		}
	}

/* Share variables between multiple UI scripts by adding them to your scope object. For example: 
	x_58872_needit.sharedVar = 0; 

 Then access them in your scripts the same way. For example: 
	function get_shared() {
		return x_58872_needit.sharedVar;
	}
*/

	return {

/* set your public API here. For example:
		incrementAndReturnPrivateVar: function() {
			return private_function();
		},
*/
		addYear: function(obj, cnt, format) {
			var d = stringToDate(obj);
			d.setYear(d.getYear() + cnt);
			if (format) {
				return dateToString(d, format);
			} else {
				return d;
			}
		},

		addMonth: function(obj, cnt, format) {
			var d = stringToDate(obj);
			d.setMonth(d.getMonth() + cnt);
			if (format) {
				return dateToString(d, format);
			} else {
				return d;
			}
		},

		addDate: function(obj, cnt, format) {
			var d = stringToDate(obj);
			d.setDate(d.getDate() + cnt);
			if (format) {
				return dateToString(d, format);
			} else {
				return d;
			}
		},

		transformString: function(obj) {
			var objType = typeof obj;
			if (obj === null || obj === "" || objType === "undefined") {
				return "";
			} else if (objType === "string") {
				return obj;
			} else if (objType === "object") {
				if ("richText" in obj) {
					var richText = obj.richText;
					var buff = "";
					for (var i = 0; i < richText.length; i++) {
						buff = buff + richText[i]["text"];
					}
					return buff;
				} else if ("result" in obj) {
					return obj.result;
				} else if ("getDate" in obj) {
					return dateToString(obj);
				} else {
					return obj.toString();
				}
			} else {
				return obj.toString();
			}
		},

		transformNumber: function(obj) {
			if (obj == null || obj == "" || typeof obj == "undefined") {
				return null;
			} else {
				return Number(obj);
			}
		},

		transformInt: function(obj) {
			if (obj == null || obj == "" || typeof obj == "undefined") {
				return null;
			} else {
				return parseInt(obj);
			}
		},

		transformFloat: function(obj) {
			if (obj == null || obj == "" || typeof obj == "undefined") {
				return null;
			} else {
				return parseFloat(obj);
			}
		},
		
		//改变object中指定字段的类型
		typeTransform: function(obj, item, type) {
			var itemValue = obj[item];
			if (type == "int") {
				obj[item] = this.transformInt(itemValue);
			} else if (type == "float") {
				obj[item] = this.transformFloat(itemValue);
			} else if (type == "number") {
				obj[item] = this.transformNumber(itemValue);
			} else {
				obj[item] = this.transformString(itemValue);
			}
		},

		// getLocalFile函数：通过FileReader读取本地文件并返回结果给Promise
		// type: 可以指定的文件类型有'text'，'arraybuffer'，'dataURL'，'binaryString'
		// return: Promise，成功值（reader），失败值（失败原因）
		getLocalFile: function(fileObj, type) {
			return new Promise(function(resolve, reject) {
				var reader = new FileReader();
				reader.filename = fileObj.name;
				reader.filetype = fileObj.type;
				reader.onloadend = function(e) {
					resolve(e.target);
				};
				reader.onerror = function(e) {
					var errCode = e.target.error.code;
					if (errCode >= reader_err_message.length) {
						reject(errCode + ": UNKNOW");
					} else {
						reject(reader_err_message[errCode]);
					}
				};
				if (type == "arraybuffer") {
					/* read excel */
					reader.readAsArrayBuffer(fileObj);
				} else if (type == "dataURL") {
					/* read base64 */
					reader.readAsDataURL(fileObj);
				} else if (type == "binaryString") {
					reader.readAsBinaryString(fileObj);
				} else {
					reader.readAsText(fileObj);
				}
			});
		},

		// 从指定Ajax函数返回结果给Promise
		// url: 调用Ajax的名称
		// functionName: Ajax里的函数名（该函数必须返回带result和message属性的object类型的变量）
		// params: 传递给function的参数，可选
		// return: Promise，成功值（Ajax的执行结果和取得值），失败值（失败原因）
		getAjax: function(url, functionName, params) {
			//设定默认params为空
			if (typeof params == 'undefined' || params == null) {
				params = {};
			}
			return new Promise(function(resolve, reject) {
				var ga = new GlideAjax(url);
				ga.addParam('sysparm_name', functionName);
				for (var key in params) {
					ga.addParam('sysparm_' + key, params[key]);
				}
				ga.getXMLAnswer(function(answer) {
					try {
						var jsonObj = JSON.parse(answer);
						if (jsonObj.result == "ok") {
							resolve(jsonObj);
						} else {
							reject(jsonObj.message);
						}
					} catch(err) {
						reject(err.message);
					}
				});
			});
		}, 
		
		type:  "Utility"
	};
})();
]]></script>
        <script_name>Utility</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-27 07:43:27</sys_created_on>
        <sys_id>3abd21e193c74210868ab4de3bba10c7</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>x_58872_needit.Utility</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ui_script_3abd21e193c74210868ab4de3bba10c7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-03 02:47:00</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
